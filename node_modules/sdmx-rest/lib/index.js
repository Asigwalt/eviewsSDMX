// Generated by CoffeeScript 1.10.0
(function() {
  var ApiVersion, DataDetail, DataFormat, DataQuery, MetadataDetail, MetadataFormat, MetadataQuery, MetadataReferences, MetadataType, SdmxPatterns, Service, UrlGenerator, addHeaders, checkStatus, fetch, getDataQuery, getMetadataQuery, getService, getUrl, guessService, promise, request, userAgent,
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  DataQuery = require('./data/data-query').DataQuery;

  DataFormat = require('./data/data-format').DataFormat;

  DataDetail = require('./data/data-detail').DataDetail;

  MetadataQuery = require('./metadata/metadata-query').MetadataQuery;

  MetadataFormat = require('./metadata/metadata-format').MetadataFormat;

  MetadataDetail = require('./metadata/metadata-detail').MetadataDetail;

  MetadataReferences = require('./metadata/metadata-references').MetadataReferences;

  MetadataType = require('./metadata/metadata-type').MetadataType;

  Service = require('./service/service').Service;

  UrlGenerator = require('./utils/url-generator').UrlGenerator;

  ApiVersion = require('./utils/api-version').ApiVersion;

  SdmxPatterns = require('./utils/sdmx-patterns');

  promise = require('es6-promise');

  promise.polyfill();

  fetch = require('isomorphic-fetch');

  userAgent = 'sdmx-rest4js (https://github.com/sosna/sdmx-rest4js)';

  checkStatus = function(query, response) {
    var code;
    code = response != null ? response.status : void 0;
    if (!((100 < code && code < 300) || code === 304 || (code === 404 && query.updatedAfter))) {
      throw RangeError("Request failed with error code " + code);
    }
  };

  addHeaders = function(opts, s, isDataQuery) {
    var headers, key;
    opts = opts != null ? opts : {};
    headers = {};
    for (key in opts.headers) {
      headers[key.toLowerCase()] = opts.headers[key];
    }
    if (s.format && isDataQuery) {
      if (!headers.accept) {
        headers.accept = s.format;
      }
    }
    if (!headers['user-agent']) {
      headers['user-agent'] = userAgent;
    }
    opts.headers = headers;
    return opts;
  };

  guessService = function(u) {
    var k, ref, s;
    s = (function() {
      var ref, results;
      results = [];
      for (k in Service) {
        if (!hasProp.call(Service, k)) continue;
        if (u.indexOf((ref = Service[k]) != null ? ref.url : void 0) > -1) {
          results.push(Service[k]);
        }
      }
      return results;
    })();
    return (ref = s[0]) != null ? ref : {};
  };

  getService = function(input) {
    if (typeof input === 'string') {
      if (!Service[input]) {
        throw ReferenceError(input + " is not in the list of predefined services");
      }
      return Service[input];
    } else if (input instanceof Object && Object.prototype.toString.call(input) === '[object Object]') {
      return Service.from(input);
    } else {
      throw TypeError("Invalid type of " + input + ". Expected an object or a string");
    }
  };

  getDataQuery = function(input) {
    return DataQuery.from(input);
  };

  getMetadataQuery = function(input) {
    return MetadataQuery.from(input);
  };

  getUrl = function(query, service) {
    var q, s;
    if (!service) {
      throw ReferenceError('Service is a mandatory parameter');
    }
    s = getService(service);
    if (!((query != null ? query.flow : void 0) || (query != null ? query.resource : void 0))) {
      throw Error('Not a valid query');
    }
    q = query.flow ? getDataQuery(query) : getMetadataQuery(query);
    return new UrlGenerator().getUrl(q, s);
  };

  request = function() {
    var isDataQuery, o, params, q, requestOptions, s, u;
    params = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    q = params[0];
    s = typeof q === 'string' ? guessService(q) : getService(params[1]);
    u = typeof q === 'string' ? q : getUrl(q, s);
    o = typeof q === 'string' ? params[1] : params[2];
    isDataQuery = false;
    if (typeof q === 'string' && q.indexOf('/data/') > -1) {
      isDataQuery = true;
    } else if (q.flow) {
      isDataQuery = true;
    }
    requestOptions = addHeaders(o, s, isDataQuery);
    return fetch(u, requestOptions).then(function(response) {
      checkStatus(q, response);
      return response.text();
    }).then(function(body) {
      return body;
    });
  };

  module.exports = {
    getService: getService,
    getDataQuery: getDataQuery,
    getMetadataQuery: getMetadataQuery,
    getUrl: getUrl,
    request: request,
    data: {
      DataFormat: DataFormat,
      DataDetail: DataDetail
    },
    metadata: {
      MetadataFormat: MetadataFormat,
      MetadataDetail: MetadataDetail,
      MetadataReferences: MetadataReferences,
      MetadataType: MetadataType
    },
    utils: {
      ApiVersion: ApiVersion,
      SdmxPatterns: SdmxPatterns
    }
  };

}).call(this);
