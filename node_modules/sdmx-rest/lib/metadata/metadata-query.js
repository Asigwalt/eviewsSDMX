// Generated by CoffeeScript 1.10.0
(function() {
  var IDType, MetadataDetail, MetadataQuery, MetadataReferences, MetadataType, NestedIDType, NestedNCNameIDType, VersionType, canHaveItem, createErrorMessage, defaults, isItemScheme, isValidEnum, isValidPattern, query, ref, ref1, ref2, validQuery;

  MetadataDetail = require('./metadata-detail').MetadataDetail;

  MetadataReferences = require('./metadata-references').MetadataReferences;

  ref = require('./metadata-type'), MetadataType = ref.MetadataType, isItemScheme = ref.isItemScheme;

  ref1 = require('../utils/sdmx-patterns'), NestedNCNameIDType = ref1.NestedNCNameIDType, IDType = ref1.IDType, VersionType = ref1.VersionType, NestedIDType = ref1.NestedIDType;

  ref2 = require('../utils/validators'), isValidEnum = ref2.isValidEnum, isValidPattern = ref2.isValidPattern, createErrorMessage = ref2.createErrorMessage;

  defaults = {
    agency: 'all',
    id: 'all',
    version: 'latest',
    detail: MetadataDetail.FULL,
    references: MetadataReferences.NONE,
    item: 'all'
  };

  canHaveItem = function(query, errors) {
    var allowed;
    allowed = query.item === 'all' || isItemScheme(query.resource);
    if (!allowed) {
      errors.push(query.resource + " is not an item scheme and therefore it is not possible to query by item");
    }
    return allowed;
  };

  validQuery = function(query) {
    var errors, isValid;
    errors = [];
    isValid = isValidEnum(query.resource, MetadataType, 'resources', errors) && isValidPattern(query.agency, NestedNCNameIDType, 'agencies', errors) && isValidPattern(query.id, IDType, 'resource ids', errors) && isValidPattern(query.version, VersionType, 'versions', errors) && isValidPattern(query.item, NestedIDType, 'items', errors) && canHaveItem(query, errors) && isValidEnum(query.detail, MetadataDetail, 'details', errors) && isValidEnum(query.references, MetadataReferences, 'references', errors);
    return {
      isValid: isValid,
      errors: errors
    };
  };

  query = MetadataQuery = (function() {
    function MetadataQuery() {}

    MetadataQuery.from = function(opts) {
      var input, ref3, ref4, ref5, ref6, ref7, ref8;
      query = {
        resource: opts != null ? opts.resource : void 0,
        agency: (ref3 = opts != null ? opts.agency : void 0) != null ? ref3 : defaults.agency,
        id: (ref4 = opts != null ? opts.id : void 0) != null ? ref4 : defaults.id,
        version: (ref5 = opts != null ? opts.version : void 0) != null ? ref5 : defaults.version,
        detail: (ref6 = opts != null ? opts.detail : void 0) != null ? ref6 : defaults.detail,
        references: (ref7 = opts != null ? opts.references : void 0) != null ? ref7 : defaults.references,
        item: (ref8 = opts != null ? opts.item : void 0) != null ? ref8 : defaults.item
      };
      input = validQuery(query);
      if (!input.isValid) {
        throw Error(createErrorMessage(input.errors, 'metadata query'));
      }
      return query;
    };

    return MetadataQuery;

  })();

  exports.MetadataQuery = query;

}).call(this);
