// Generated by CoffeeScript 1.10.0
(function() {
  var ApiVersion, DataQuery, Generator, MetadataQuery, Service, createDataQuery, createEntryPoint, createMetadataQuery, generator;

  Service = require('../service/service').Service;

  ApiVersion = require('../utils/api-version').ApiVersion;

  DataQuery = require('../data/data-query').DataQuery;

  MetadataQuery = require('../metadata/metadata-query').MetadataQuery;

  createEntryPoint = function(service) {
    var url;
    if (!service.url) {
      throw ReferenceError(service.url + " is not a valid service");
    }
    url = service.url;
    if (!(service.url.indexOf('/', service.url.length - 1) > -1)) {
      url = url + '/';
    }
    return url;
  };

  createDataQuery = function(query, service) {
    var url;
    url = createEntryPoint(service);
    url = url + ("data/" + query.flow + "/" + query.key + "/" + query.provider);
    url = url + ("?dimensionAtObservation=" + query.obsDimension);
    url = url + ("&detail=" + query.detail);
    if (service.api !== ApiVersion.v1_0_0 && service.api !== ApiVersion.v1_0_1 && service.api !== ApiVersion.v1_0_2) {
      url = url + ("&includeHistory=" + query.history);
    }
    if (query.start) {
      url = url + ("&startPeriod=" + query.start);
    }
    if (query.end) {
      url = url + ("&endPeriod=" + query.end);
    }
    if (query.updatedAfter) {
      url = url + ("&updatedAfter=" + query.updatedAfter);
    }
    if (query.firstNObs) {
      url = url + ("&firstNObservations=" + query.firstNObs);
    }
    if (query.lastNObs) {
      url = url + ("&lastNObservations=" + query.lastNObs);
    }
    return url;
  };

  createMetadataQuery = function(query, service) {
    var url;
    url = createEntryPoint(service);
    url = url + (query.resource + "/" + query.agency + "/" + query.id + "/" + query.version);
    if (service.api !== ApiVersion.v1_0_0 && service.api !== ApiVersion.v1_0_1 && service.api !== ApiVersion.v1_0_2) {
      url = url + ("/" + query.item);
    }
    url = url + ("?detail=" + query.detail + "&references=" + query.references);
    return url;
  };

  generator = Generator = (function() {
    function Generator() {}

    Generator.prototype.getUrl = function(query1, service) {
      var ref, ref1, url;
      this.query = query1;
      this.service = service != null ? service : ApiVersion.LATEST;
      if (((ref = this.query) != null ? ref.flow : void 0) != null) {
        url = createDataQuery(this.query, this.service);
      } else if (((ref1 = this.query) != null ? ref1.resource : void 0) != null) {
        url = createMetadataQuery(this.query, this.service);
      } else {
        throw TypeError(this.query + " is not a valid SDMX data or metadata query");
      }
      return url;
    };

    return Generator;

  })();

  exports.UrlGenerator = generator;

}).call(this);
