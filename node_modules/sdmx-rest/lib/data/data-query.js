// Generated by CoffeeScript 1.10.0
(function() {
  var DataDetail, DataQuery, FlowRefType, NCNameIDType, ProviderRefType, SeriesKeyType, createErrorMessage, defaults, isValidDate, isValidEnum, isValidHistory, isValidNObs, isValidPattern, isValidPeriod, isValidQuery, query, ref, ref1, toKeyString;

  DataDetail = require('./data-detail').DataDetail;

  ref = require('../utils/sdmx-patterns'), FlowRefType = ref.FlowRefType, SeriesKeyType = ref.SeriesKeyType, ProviderRefType = ref.ProviderRefType, NCNameIDType = ref.NCNameIDType;

  ref1 = require('../utils/validators'), isValidEnum = ref1.isValidEnum, isValidPattern = ref1.isValidPattern, isValidPeriod = ref1.isValidPeriod, isValidDate = ref1.isValidDate, createErrorMessage = ref1.createErrorMessage;

  defaults = {
    key: 'all',
    provider: 'all',
    obsDimension: 'TIME_PERIOD',
    detail: DataDetail.FULL,
    history: false
  };

  isValidHistory = function(input, errors) {
    var valid;
    valid = typeof input === 'boolean';
    if (!valid) {
      errors.push(input + " is not a valid value for history. Must be true or false");
    }
    return valid;
  };

  isValidNObs = function(input, name, errors) {
    var valid;
    valid = typeof input === 'number' && input > 0;
    if (!valid) {
      errors.push(input + " is not a valid value for " + name + ". Must be a positive integer");
    }
    return valid;
  };

  isValidQuery = function(q) {
    var errors, isValid;
    errors = [];
    isValid = isValidPattern(q.flow, FlowRefType, 'flows', errors) && isValidPattern(q.key, SeriesKeyType, 'series key', errors) && isValidPattern(q.provider, ProviderRefType, 'provider', errors) && (!q.start || isValidPeriod(q.start, 'start period', errors)) && (!q.end || isValidPeriod(q.end, 'end period', errors)) && (!q.updatedAfter || isValidDate(q.updatedAfter, 'updatedAfter', errors)) && (!q.firstNObs || isValidNObs(q.firstNObs, 'firstNObs', errors)) && (!q.lastNObs || isValidNObs(q.lastNObs, 'lastNObs', errors)) && isValidPattern(q.obsDimension, NCNameIDType, 'obs dimension', errors) && isValidEnum(q.detail, DataDetail, 'details', errors) && isValidHistory(q.history, errors);
    return {
      isValid: isValid,
      errors: errors
    };
  };

  toKeyString = function(dims) {
    var d;
    return ((function() {
      var i, len, results;
      results = [];
      for (i = 0, len = dims.length; i < len; i++) {
        d = dims[i];
        results.push(Array.isArray(d) ? d.join('+') : d != null ? d : '');
      }
      return results;
    })()).join('.');
  };

  query = DataQuery = (function() {
    function DataQuery() {}

    DataQuery.from = function(opts) {
      var input, key, ref2, ref3, ref4, ref5, ref6;
      key = (ref2 = opts != null ? opts.key : void 0) != null ? ref2 : defaults.key;
      if (Array.isArray(key)) {
        key = toKeyString(key);
      }
      query = {
        flow: opts != null ? opts.flow : void 0,
        key: key,
        provider: (ref3 = opts != null ? opts.provider : void 0) != null ? ref3 : defaults.provider,
        start: opts != null ? opts.start : void 0,
        end: opts != null ? opts.end : void 0,
        updatedAfter: opts != null ? opts.updatedAfter : void 0,
        firstNObs: opts != null ? opts.firstNObs : void 0,
        lastNObs: opts != null ? opts.lastNObs : void 0,
        obsDimension: (ref4 = opts != null ? opts.obsDimension : void 0) != null ? ref4 : defaults.obsDimension,
        detail: (ref5 = opts != null ? opts.detail : void 0) != null ? ref5 : defaults.detail,
        history: (ref6 = opts != null ? opts.history : void 0) != null ? ref6 : defaults.history
      };
      input = isValidQuery(query);
      if (!input.isValid) {
        throw Error(createErrorMessage(input.errors, 'data query'));
      }
      return query;
    };

    return DataQuery;

  })();

  exports.DataQuery = query;

}).call(this);
